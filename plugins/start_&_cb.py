import random, asyncio, datetime, pytz, time, psutil, shutil
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply, CallbackQuery
from helper.database import db
from config import Config, tony
from helper.utils import humanbytes

upgrade_button = InlineKeyboardMarkup([[        
        InlineKeyboardButton('buy premium ‚úì', user_id=int(6705898491)),
         ],[
        InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data = "start")
]])

upgrade_trial_button = InlineKeyboardMarkup([[        
        InlineKeyboardButton('buy premium ‚úì', user_id=int(6705898491)),
         ],[
        InlineKeyboardButton("·¥õ Ä…™·¥Ä ü - ùü∑ùü∏  ú·¥è·¥ú Äs ‚úì", callback_data = "give_trial"),
        InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data = "start")
]])

start_button = InlineKeyboardMarkup([[        
        InlineKeyboardButton('U·¥©·¥Ö·¥ÄùöÉ·¥áÍú±', url='https://t.me/TonyStark_Botz'),
        InlineKeyboardButton('S·¥ú·¥©·¥©·¥è ÄùöÉ', url='https://t.me/TonyStarkBotzXSupport')
        ],[
        InlineKeyboardButton('A ô·¥èœÖ·¥õ', callback_data='about'),
        InlineKeyboardButton('H·¥á ü·¥©', callback_data='help')
        ],[
        InlineKeyboardButton('üí∏ ·¥ú·¥ò…¢ Ä·¥Ä·¥Ö·¥á ·¥õ·¥è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç üí∏', callback_data='upgrade')
         ]])

@Client.on_message(filters.private & filters.command("start"))
async def start(client, message):
    user = message.from_user
    await db.add_user(client, message) 
    if Config.PIC:
        await message.reply_photo(Config.PIC, caption=tony.START_TXT.format(user.mention), reply_markup=start_button)       
    else:
        await message.reply_text(text=tony.START_TXT.format(user.mention), reply_markup=start_button, disable_web_page_preview=True)

@Client.on_message(filters.private & filters.command("myplan"))
async def myplan(client, message):
    user_id  = message.from_user.id
    user = message.from_user.mention
    if await db.has_premium_access(user_id):
        
        data = await db.get_user(user_id)
        expiry_str_in_ist = data.get("expiry_time")
        time_left_str = expiry_str_in_ist - datetime.datetime.now()
       # time_left_str = await db.checking_remaining_time(user_id)
        #expiry_str_in_ist = time_left_str + datetime.datetime.now()
        
        await message.reply_text(f"‚öúÔ∏è  è·¥è·¥ú Ä ·¥ò ü·¥Ä…¥s ·¥Ö·¥á·¥õ·¥Ä…™ üs ·¥Ä Ä·¥á :\n\nüë§ ·¥úÍú±·¥á Ä : {user}\n‚ö° ·¥úÍú±·¥á Ä …™·¥Ö : <code>{user_id}</code>\n‚è∞ ·¥õ…™·¥ç·¥á  ü·¥áÍú∞·¥õ : {time_left_str}\n‚åõÔ∏è ·¥áx·¥ò…™ Ä è ·¥Ö·¥Ä·¥õ·¥á : {expiry_str_in_ist}")
    else:
        m=await message.reply_sticker("CAACAgIAAxkBAAIBTGVjQbHuhOiboQsDm35brLGyLQ28AAJ-GgACglXYSXgCrotQHjibHgQ")
        await message.reply_text(f" ú·¥á è {user},\n\n è·¥è·¥ú ·¥Ö·¥è …¥·¥è·¥õ  ú·¥Ä·¥†·¥á ·¥Ä…¥ è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥s, …™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥õ·¥Ä·¥ã·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥õ ú·¥á…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ üëá",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí∏ ·¥Ñ ú·¥á·¥Ñ·¥ã·¥è·¥ú·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥Íú± üí∏", callback_data='upgrade')]]))			 
        await asyncio.sleep(2)
        await m.delete()

@Client.on_message(filters.private & filters.command("plans"))
async def plans(client, message):
    user = message.from_user
    free_trial_status = await db.get_free_trial_status(user.id)
    if not await db.has_premium_access(user.id):
        if not free_trial_status:
            await message.reply_text(text=tony.UPGRADE.format(user.mention), reply_markup=upgrade_trial_button, disable_web_page_preview=True)
        else:
            await message.reply_text(text=tony.UPGRADE.format(user.mention), reply_markup=upgrade_button, disable_web_page_preview=True)
    else:
        await message.reply_text(text=tony.UPGRADE.format(user.mention), reply_markup=upgrade_button, disable_web_page_preview=True)
   
  
@Client.on_callback_query()
async def cb_handler(client, query: CallbackQuery):
    data = query.data 
    if data == "start":
        await query.message.edit_text(
            text=tony.START_TXT.format(query.from_user.mention),
            disable_web_page_preview=True,
            reply_markup = start_button)
        
    elif data == "help":
        await query.message.edit_text(
            text=tony.HELP_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
                #‚ö†Ô∏è don't change source code & source link ‚ö†Ô∏è #
                InlineKeyboardButton("·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü", callback_data = "thumbnail"),
                InlineKeyboardButton("·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥", callback_data = "caption")
                ],[          
                InlineKeyboardButton("·¥Ñ·¥ús·¥õ·¥è·¥ç “ì…™ ü·¥á …¥·¥Ä·¥ç·¥á", callback_data = "custom_file_name")    
                ],[          
                InlineKeyboardButton("·¥Ä ô·¥è·¥ú·¥õ", callback_data = "about"),
                InlineKeyboardButton("·¥ç·¥á·¥õ·¥Ä·¥Ö·¥Ä·¥õ·¥Ä", callback_data = "quick_meta_data")
                                     ],[
                InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data = "start")
                  ]]))         
        
    elif data == "about":
        await query.message.edit_text(
            text=tony.ABOUT_TXT.format(client.mention),
            disable_web_page_preview = True,
            reply_markup=InlineKeyboardMarkup([[
                #‚ö†Ô∏è don't change source code & source link ‚ö†Ô∏è #
                InlineKeyboardButton("ùöÇ·¥è·¥ú Ä·¥Ñ·¥á",
     callback_data = "source_code"), #Whoever is deploying this repo is given a warning ‚ö†Ô∏è not to remove this repo link #first & last warning ‚ö†Ô∏è
                InlineKeyboardButton(" ô·¥è·¥õ s·¥õ·¥Ä·¥õ·¥ús", callback_data = "bot_status")
                ],[
                InlineKeyboardButton(" ü…™·¥†·¥á s·¥õ·¥Ä·¥õ·¥ús", callback_data = "live_status"),
                InlineKeyboardButton("·¥ú·¥ò…¢ Ä·¥Ä·¥Ö·¥á", callback_data = "upgrade")
                ],[   
                InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data = "start")
            
           ]]))    
        
    elif data == "upgrade":
        free_trial_status = await db.get_free_trial_status(query.from_user.id)
        if not await db.has_premium_access(query.from_user.id):
            if not free_trial_status:
                await query.message.edit_text(text=tony.UPGRADE, disable_web_page_preview=True, reply_markup=upgrade_trial_button)   
            else:
                await query.message.edit_text(text=tony.UPGRADE, disable_web_page_preview=True, reply_markup=upgrade_button)
        else:
            await query.message.edit_text(text=tony.UPGRADE, disable_web_page_preview=True, reply_markup=upgrade_button)
           
    elif data == "give_trial":
        await query.message.delete()
        free_trial_status = await db.get_free_trial_status(query.from_user.id)
        if not free_trial_status:            
            await db.give_free_trail(query.from_user.id)
            new_text = "** è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥õ Ä…™·¥Ä ü  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö “ì·¥è Ä ùü∑ùü∏  ú·¥è·¥ú Äs.\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á Íú∞ Ä·¥á·¥á ·¥õ Ä·¥Ä…™ ü Íú∞·¥è Ä ùü∑ùü∏  ú·¥è·¥ú Äs Íú∞ Ä·¥è·¥ç …¥·¥è·¥° üòÄ\n\n‡§Ü‡§™ ‡§Ö‡§¨ ‡§∏‡•á ùü∑ùü∏ ‡§ò‡§£‡•ç‡§ü‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§É‡§∂‡•Å‡§≤‡•ç‡§ï ‡§ü‡•ç‡§∞‡§æ‡§Ø‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç üòÄ**"
        else:
            new_text = "**ü§£  è·¥è·¥ú ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ús·¥á·¥Ö “ì Ä·¥á·¥á …¥·¥è·¥° …¥·¥è ·¥ç·¥è Ä·¥á “ì Ä·¥á·¥á ·¥õ Ä·¥Ä…™ ü. ·¥ò ü·¥á·¥Äs·¥á  ô·¥ú è s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  ú·¥á Ä·¥á ·¥Ä Ä·¥á ·¥è·¥ú Ä üëâ /plans**"
        await client.send_message(query.from_user.id, text=new_text)

    elif data == "thumbnail":
        await query.message.edit_text(
            text=tony.THUMBNAIL,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
             InlineKeyboardButton(" B·¥Ä·¥Ñ·¥ã", callback_data = "help")]])) 
      
    elif data == "caption":
        await query.message.edit_text(
            text=tony.CAPTION,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
             InlineKeyboardButton(" B·¥Ä·¥Ñ·¥ã", callback_data = "help")]])) 
      
    elif data == "custom_file_name":
        await query.message.edit_text(
            text=tony.CUSTOM_FILE_NAME,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
             InlineKeyboardButton(" B·¥Ä·¥Ñ·¥ã", callback_data = "help")]])) 
      
    elif data == "quick_meta_data":
        await query.message.edit_text(
            text=tony.QUICK_METADATA,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
             InlineKeyboardButton(" B·¥Ä·¥Ñ·¥ã", callback_data = "help")]])) 
      
    elif data == "bot_status":
        total_users = await db.total_users_count()
        total_premium_users = await db.total_premium_users_count()
        uptime = time.strftime("%Hh%Mm%Ss", time.gmtime(time.time() - client.uptime))    
        sent = humanbytes(psutil.net_io_counters().bytes_sent)
        recv = humanbytes(psutil.net_io_counters().bytes_recv)
        await query.message.edit_text(
            text=tony.BOT_STATUS.format(uptime, total_users, total_premium_users, sent, recv),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
             InlineKeyboardButton(" B·¥Ä·¥Ñ·¥ã", callback_data = "about")]])) 
      
    elif data == "live_status":
        currentTime = time.strftime("%Hh%Mm%Ss", time.gmtime(time.time() - client.uptime))    
        total, used, free = shutil.disk_usage(".")
        total = humanbytes(total)
        used = humanbytes(used)
        free = humanbytes(free)
        sent = humanbytes(psutil.net_io_counters().bytes_sent)
        recv = humanbytes(psutil.net_io_counters().bytes_recv)
        cpu_usage = psutil.cpu_percent()
        ram_usage = psutil.virtual_memory().percent
        disk_usage = psutil.disk_usage('/').percent
        await query.message.edit_text(
            text=tony.LIVE_STATUS.format(currentTime, cpu_usage, ram_usage, total, used, disk_usage, free, sent, recv),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
             InlineKeyboardButton(" B·¥Ä·¥Ñ·¥ã", callback_data = "about")]])) 
      
    elif data == "source_code":
        await query.message.edit_text(
            text=tony.DEV_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
                #‚ö†Ô∏è don't change source code & source link ‚ö†Ô∏è #
           #Whoever is deploying this repo is given a warning ‚ö†Ô∏è not to remove this repo link #first & last warning ‚ö†Ô∏è   
                InlineKeyboardButton("üíû S·¥è·¥ú Ä·¥Ñ·¥á C·¥è·¥Ö·¥á üíû", url="https://github.com/TonyStarkBotz/Quick-Rename-Bot")
            ],[
                InlineKeyboardButton("üîí C ü·¥èÍú±·¥á", callback_data = "close"),
                InlineKeyboardButton("‚óÄÔ∏è B·¥Ä·¥Ñ·¥ã", callback_data = "start")
                 ]])          
        )
    elif data == "close":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
            await query.message.continue_propagation()
        except:
            await query.message.delete()
            await query.message.continue_propagation()

# Don't Remove Credit üòî
# Telegram Channel @TonyStark_Botz & @MovieTimesTV
# Developer @Tony_Stark_75
# Update Channel @TonyStark_Botz & @TonyStarkBotzXSupport
